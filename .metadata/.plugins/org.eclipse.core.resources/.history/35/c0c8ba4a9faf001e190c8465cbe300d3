/*
 * ringbuf.h
 *
 *  Created on: Jan 9, 2024
 *      Author: teodors.kerimovs
 */

#ifndef RINGBUF_H_
#define RINGBUF_H_

//// Simple ring buffer.
//typedef struct {
//  int len;
//  volatile char* buf;
//  volatile int  pos;
//  volatile int  ext;
//} ringbuf;
//// Helper macro to write to a buffer.
//#define ringbuf_write( rb, x ) \
//  rb.buf[ rb.ext ] = x; \
//  if ( ( rb.ext + 1 ) >= rb.len ) { rb.ext = 0; } \
//  else { rb.ext = rb.ext + 1; }
//// Read from a buffer. Returns '\0' if there is nothing to read.
//static inline char ringbuf_read( ringbuf* buf ) {
//  if ( buf->pos == buf->ext ) { return '\0'; }
//  char read = buf->buf[ buf->pos ];
//  buf->pos = ( buf->pos < ( buf->len - 1 ) ) ? ( buf->pos + 1 ) : 0;
//  return read;
//}


typedef struct ring_buffer_t {
	uint8_t* buffer;
	uint32_t mask;
	uint32_t read_index;
	uint32_t write_index;
} ring_buffer_t;

void ring_buffer_setup(ring_buffer_t* rb, uint8_t* buffer, uint32_t size);
bool ring_buffer_empty(ring_buffer_t* rb);
bool ring_buffer_write(ring_buffer_t* rb, uint8_t byte);
bool ring_buffer_read(ring_buffer_t* rb, uint8_t byte);


#endif /* RINGBUF_H_ */
