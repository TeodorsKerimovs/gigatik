/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdbool.h>
#include<stm32f1xx.h>

static volatile bool led_on = 0;


/***************************************************************************//**

  \details  This function enables the HSI clock as a system clock and generate
            the 8MHz. The Internal HSI Clock is 8MHz. So, we are not using PLL
            and not dividing, Multiplying. So, we will get the 8MHz as it is.

  \return   void

  \retval   none

*******************************************************************************/
static void SetSystemClockTo8Mhz(void)
{
  /* Enabling the HSI clock - If not enabled and ready */
  if( (RCC->CR & RCC_CR_HSIRDY) == 0)
  {
    RCC->CR |= RCC_CR_HSION;  /* HSION=1 */

    /* Waiting until HSI clock is ready */
    while( (RCC->CR & RCC_CR_HSIRDY) == 0);
  }

  /* Select AHB prescaler to 1 */
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;

  /* APB1 prescaler to 1 */
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;

  /* APB2 prescaler to 1 */
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;

  /* Select the HSI as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
  RCC->CFGR |= RCC_CFGR_SW_HSI;

  FLASH->ACR  |= FLASH_ACR_LATENCY_2;

  /* Disabling HSE Clock */
  RCC->CR &= ~RCC_CR_HSEON;
}

/***************************************************************************//**
  \details  This function configures the timer 3 to generate the 1ms delay.
  \return   void
  \retval   none
*******************************************************************************/

static void ConfigureTimer3(void)
{
  /* Enable the APB clock FOR TIM3  */
  SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN);

  /* fCK_PSC / (PSC[15:0] + 1)
     (8 MHz / (7999+1)) = 1 KHz timer clock speed */
  TIM3->PSC = 7999;

  /* (1 KHz / 1000) = 1Hz = 1s */
  /* So, this will generate the 1s delay */
  TIM3->ARR = 999;

  /* Enable the Interrupt */
  TIM3->DIER |= TIM_DIER_UIE;

  /* Clear the Interrupt Status */
  TIM3->SR &= ~TIM_SR_UIF;

  /* Enable NVIC Interrupt for Timer 3 */
  NVIC_EnableIRQ(TIM3_IRQn);

}

static void EnableTimer3(uint32_t ms)
{
	TIM3->CR1 = TIM_CR1_CEN;
	TIM3->ARR = ms;
}

void DisableTimer3(void)
{
	TIM3->CR1 = ~TIM_CR1_CEN;
}


void TIM3_IRQHandler(void)
{
  /* if UIF flag is set */
  if(TIM3->SR & TIM_SR_UIF)
  {
	//DisableTimer3();
    led_on = !led_on;
    if( led_on )
    {
    	// https://gist.github.com/iwalpola/6c36c9573fd322a268ce890a118571ca
    	GPIOA -> ODR = GPIO_ODR_ODR5;
    }
    else
    {
    	// https://gist.github.com/iwalpola/6c36c9573fd322a268ce890a118571ca
    	GPIOA -> ODR = ~GPIO_ODR_ODR5;
    }
    /* Clear the Interrupt Status */
    TIM3->SR &= ~TIM_SR_UIF;
  }
}
/***************************************************************************//**
  \details  The main function.  It should not return.
  \return   void
  \retval   none
*******************************************************************************/
int main(void)
{
  /* Set System clock to 16 MHz using HSI */
  SetSystemClockTo8Mhz();

  /* Configure the Timer 3 */
  ConfigureTimer3();

  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;

  __DSB();

  GPIOA->CRL &= ~GPIO_CRL_CNF5_Msk; // Clears CNF to set it for output
  GPIOA->CRL |= GPIO_CRL_MODE5_Msk; // Sets Mode, to 11 to make it as output


  //GPIOC->CRH &= ~GPIO_CRL_CNF5_Msk;

//  GPIOC->CRH &= ~(1<<20);
//  GPIOC->CRH &= ~(1<<21);
//
//  GPIOC->CRH |= (1<<22);
//  GPIOC->CRH |= (1<<23);
//
//  GPIOC->ODR |= (0<<13);

  GPIOC->MODER  &= ~(0x3 << (13*2));
  GPIOC->PUPDR  &= ~(0x3 << (13*2));
  GPIOC->PUPDR  |=  (0x1 << (13*2));
  //GPIOC->PUPDR |= (1<<13);
  //GPIOC->PUPDR |= ~(1<<14);
  //GPIOC->CRH |= GPIO_CRH_MODE13;

  /* Endless loop */

  while(1)
  {
	  bool result = GPIOC->IDR & (1<<13);
	  if(result){
		  EnableTimer3(1000);
	  }

  }

}









#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif



